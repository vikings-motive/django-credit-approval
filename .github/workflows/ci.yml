name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  POSTGRES_DB: test_credit_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_credit_db
  SECRET_KEY: django-insecure-test-key-for-ci
  DEBUG: True
  REDIS_URL: redis://localhost:6379/0
  CELERY_BROKER_URL: redis://localhost:6379/0
  CELERY_RESULT_BACKEND: redis://localhost:6379/0

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_credit_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort coverage
    
    - name: Run Black formatter check
      run: black --check .
      continue-on-error: true
    
    - name: Run isort import checker
      run: isort --check-only .
      continue-on-error: true
    
    - name: Run Flake8 linter
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Run tests with coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t credit-approval:test .
    
    - name: Run Docker Compose
      run: |
        echo "POSTGRES_DB=test_db" > .env
        echo "POSTGRES_USER=test_user" >> .env
        echo "POSTGRES_PASSWORD=test_pass" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "DEBUG=True" >> .env
        docker compose up -d
        sleep 10
        docker compose ps
        docker compose down

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Run safety check
      run: safety check --json
      continue-on-error: true
    
    - name: Run bandit security linter
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true